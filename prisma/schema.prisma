// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  COMPANY
  CANDIDATE
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum CategoriesJob {
  DESIGN
  SALES
  MARKETING
  BUSINESS
  HUMAN_RESOURCE
  FINANCE
  ENGINEERING
  TECHNOLOGY
}

enum TypeJob {
  FULL_TIME
  PART_TIME
  REMOTE
  INTERNSHIP
  CONTRACT
}

model User {
  id           String        @id @default(cuid()) @map("_id")
  clerkId      String        @unique
  email        String        @unique
  password     String
  role         Role
  name         String?
  profile      Profile?
  jobs         Job[]         @relation("PostedJobs")
  applications Application[]
  payments     Payment[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("user")
}

model Profile {
  id          String   @id @default(cuid()) @map("_id")
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  bio         String?
  skills      String[]
  resume      String?
  companyName String?
  website     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("profile")
}

model Job {
  id           String        @id @default(cuid()) @map("_id")
  title        String
  description  String
  companyId    String
  company      User          @relation(fields: [companyId], references: [id], name: "PostedJobs")
  applications Application[]
  category     CategoriesJob
  type         TypeJob
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("job")
}

model Application {
  id          String            @id @default(cuid()) @map("_id")
  jobId       String
  job         Job               @relation(fields: [jobId], references: [id])
  candidateId String
  candidate   User              @relation(fields: [candidateId], references: [id])
  status      ApplicationStatus @default(PENDING)
  createdAt   DateTime          @default(now())

  @@map("application")
}

model Payment {
  id        String        @id @default(cuid()) @map("_id")
  userId    String
  user      User          @relation(fields: [userId], references: [id])
  amount    Float
  status    PaymentStatus @default(PENDING)
  createdAt DateTime      @default(now())

  @@map("payment")
}
